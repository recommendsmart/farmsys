<?php

/**
 * @file
 * The Access Records module file.
 */

use Drupal\access_records\Entity\AccessRecordType;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\RevisionableInterface;
use Drupal\Core\Entity\Sql\SqlEntityStorageInterface;
use Drupal\Core\Entity\TranslatableInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_theme().
 */
function access_records_theme() {
  return [
    'access_record' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for access record templates.
 *
 * Default template: access-record.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the access record information
 *     and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_access_record(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function access_records_theme_suggestions_access_record(array $variables) {
  $suggestions = [];
  /** @var \Drupal\access_records\AccessRecordInterface $access_record */
  $access_record = $variables['elements']['#access_record'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'access_record__' . $sanitized_view_mode;
  $suggestions[] = 'access_record__' . $access_record->bundle();
  $suggestions[] = 'access_record__' . $access_record->bundle() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function access_records_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
  if (isset($entity_form['#entity_type']) && $entity_form['#entity_type'] === 'access_record') {
    /** @var \Drupal\access_records\AccessRecordInterface $access_record */
    $access_record = $entity_form['#entity'];
    $form_class = $access_record->getEntityType()->getFormClass('default');
    $entity_form['#entity_builders']['apply_label_pattern'] = [
      $form_class,
      'applyLabelPattern',
    ];
  }
}

/**
 * Implements hook_entity_type_build().
 */
function access_records_entity_type_build(array &$entity_types) {
  if (!isset($entity_types['access_record'])) {
    return;
  }
  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
  $entity_type = $entity_types['access_record'];
  $module_handler = \Drupal::moduleHandler();

  if ($entity_type->isTranslatable() && $module_handler->moduleExists('content_translation')) {
    $entity_type->setHandlerClass('translation', 'Drupal\content_translation\ContentTranslationHandler');
    $entity_type->set('content_translation_metadata', 'Drupal\content_translation\ContentTranslationMetadataWrapper');
    $entity_type->setFormClass('content_translation_deletion', '\Drupal\content_translation\Form\ContentTranslationDeleteForm');

    $translation = $entity_type->get('translation');
    if (!$translation || !isset($translation['content_translation'])) {
      $translation['content_translation'] = [];
    }

    // Provide default route names for the translation paths.
    $translations_path = '/access-record/{access_record}/translations';
    $entity_type->setLinkTemplate('drupal:content-translation-overview', $translations_path);
    $entity_type->setLinkTemplate('drupal:content-translation-add', $translations_path . '/add/{source}/{target}');
    $entity_type->setLinkTemplate('drupal:content-translation-edit', $translations_path . '/edit/{language}');
    $entity_type->setLinkTemplate('drupal:content-translation-delete', $translations_path . '/delete/{language}');

    // @todo Remove this as soon as menu access checks rely on the
    //   controller. See https://www.drupal.org/node/2155787.
    $translation['content_translation'] += [
      'access_callback' => 'content_translation_translate_access',
    ];
    $entity_type->set('translation', $translation);
  }

  if ($module_handler->moduleExists('entity')) {
    // Use contrib Entity API's enhanced handler for views data.
    $entity_type->setHandlerClass('views_data', 'Drupal\entity\EntityViewsData');
    // Also use contrib Entity API's query access handler.
    if (is_subclass_of($entity_type->getStorageClass(), SqlEntityStorageInterface::class)) {
      // Query access only works for SQL storages.
      $entity_type->setHandlerClass('query_access', 'Drupal\access_records\QueryAccess\AccessRecordQueryAccessHandler');
    }
  }
}

/**
 * Implements hook_entity_access().
 */
function access_records_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $etm = \Drupal::entityTypeManager();
  // Target entity types are content entities only, and matching access records
  // can only be done on persisted targets.
  if (!($entity instanceof ContentEntityInterface) || $entity->isNew()) {
    return AccessResult::neutral();
  }

  $target = $entity;
  $target_type = $target->getEntityType();
  $cacheability = new CacheableMetadata();

  /** @var \Drupal\user\UserInterface $subject */
  if (!($subject = $etm->getStorage('user')->load($account->id()))) {
    // When the subject has no stored entity, one is created on runtime here,
    // and then lookup whether an access record type exists for the target type.
    // If so, always revoke access, because matching records may only be valid
    // for existing user entities.
    $subject = $etm->getStorage('user')->create([
      'uid' => $account->id(),
      'status' => 0,
      'name' => '',
    ]);
    return AccessRecordType::loadForAccessCheck($subject, $target_type->id(), $operation, $cacheability, FALSE) ? AccessResult::forbidden()->addCacheableDependency($cacheability) : AccessResult::neutral()->addCacheableDependency($cacheability);
  }

  // Either no configured access record type exists for this type of entity,
  // or the user is an admin and thus has access anyway.
  if (AccessRecordType::loadForAccessCheck($subject, $target_type->id(), $operation, $cacheability)) {
    // As we are now aware of existing access record types that belong to this
    // type of entity, we build up an entity query, which in turn includes the
    // access check included by the Query Access API.
    // @todo Wish I could do this without switching the account, though Query
    // Access doesn't care about given account metadata. Sorry!
    $count = 0;
    $account_switched = FALSE;
    if ((string) \Drupal::currentUser()->id() !== (string) $subject->id()) {
      /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
      $account_switcher = \Drupal::service('account_switcher');
      $account_switcher->switchTo($subject);
      $account_switched = TRUE;
    }
    try {
      $query = $etm->getStorage($target_type->id())->getQuery()
        ->addMetaData('op', $operation)
        ->accessCheck(TRUE)
        ->condition($target_type->getKey('id'), $target->id());
      if ($target instanceof TranslatableInterface) {
        $query->condition($target_type->getKey('langcode'), $target->language()->getId());
      }
      if ($query instanceof RevisionableInterface) {
        $query->allRevisions();
        $query->condition($target_type->getKey('revision'), $target->getRevisionId());
      }
      $count = $query->count()
        ->accessCheck(TRUE)
        ->execute();
    }
    finally {
      if ($account_switched) {
        $account_switcher->switchBack();
        $account_switched = FALSE;
      }
    }

    if ($count > 0) {
      return AccessResult::allowed()->addCacheableDependency($cacheability);
    }
    return AccessResult::forbidden()->addCacheableDependency($cacheability);
  }

  return AccessResult::neutral()->addCacheableDependency($cacheability);
}
